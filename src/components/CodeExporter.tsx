import React, { useState } from 'react';
import { Download, Code, Copy, Check } from 'lucide-react';

import { DataFile, ChartConfig } from '../App';

interface CodeExporterProps {
  data: DataFile | null;
  config: ChartConfig;
  engine: 'd3' | 'plotly';
  onClose: () => void;
}

const CodeExporter: React.FC<CodeExporterProps> = ({ data, config, engine, onClose }) => {
  const [activeTab, setActiveTab] = useState<'code' | 'html' | 'react'>('code');
  const [copied, setCopied] = useState(false);

  const generateD3Code = (): string => {
    return `// D3.js Chart Implementation
// Generated by DynaChart Studio

// Sample data (replace with your actual data)
const data = ${JSON.stringify(data?.data.slice(0, 10) || [], null, 2)};

// Chart configuration
const config = {
  width: ${config.width},
  height: ${config.height},
  margin: { top: 60, right: 30, bottom: 60, left: 60 },
  xField: '${config.xAxis}',
  yField: '${config.yAxis}',
  colorField: '${config.colorBy || ''}',
  title: '${config.title}',
  theme: '${config.theme}',
  animation: ${config.animated}
};

// Create SVG
const svg = d3.select('#chart-container')
  .append('svg')
  .attr('width', config.width)
  .attr('height', config.height);

const g = svg.append('g')
  .attr('transform', \`translate(\${config.margin.left},\${config.margin.top})\`);

const width = config.width - config.margin.left - config.margin.right;
const height = config.height - config.margin.top - config.margin.bottom;

// Process data
const chartData = data.filter(d => d[config.xField] && d[config.yField]);

${engine === 'd3' && config.type === 'bar' ? `
// Create scales
const xScale = d3.scaleBand()
  .domain(chartData.map(d => d[config.xField]))
  .range([0, width])
  .padding(0.1);

const yScale = d3.scaleLinear()
  .domain([0, d3.max(chartData, d => +d[config.yField])])
  .range([height, 0]);

const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

// Create axes
g.append('g')
  .attr('transform', \`translate(0,\${height})\`)
  .call(d3.axisBottom(xScale));

g.append('g')
  .call(d3.axisLeft(yScale));

// Create bars
const bars = g.selectAll('.bar')
  .data(chartData)
  .enter().append('rect')
  .attr('class', 'bar')
  .attr('x', d => xScale(d[config.xField]))
  .attr('width', xScale.bandwidth())
  .attr('y', d => yScale(+d[config.yField]))
  .attr('height', d => height - yScale(+d[config.yField]))
  .attr('fill', (d, i) => colorScale(i.toString()));

// Add title
if (config.title) {
  svg.append('text')
    .attr('x', config.width / 2)
    .attr('y', 30)
    .attr('text-anchor', 'middle')
    .style('font-size', '18px')
    .style('font-weight', 'bold')
    .text(config.title);
}
` : ''}

${engine === 'd3' && config.type === 'line' ? `
// Create scales
const xScale = d3.scalePoint()
  .domain(chartData.map(d => d[config.xField]))
  .range([0, width]);

const yScale = d3.scaleLinear()
  .domain(d3.extent(chartData, d => +d[config.yField]))
  .range([height, 0]);

// Create line generator
const line = d3.line()
  .x(d => xScale(d[config.xField]))
  .y(d => yScale(+d[config.yField]))
  .curve(d3.curveMonotoneX);

// Create axes
g.append('g')
  .attr('transform', \`translate(0,\${height})\`)
  .call(d3.axisBottom(xScale));

g.append('g')
  .call(d3.axisLeft(yScale));

// Create line
g.append('path')
  .datum(chartData)
  .attr('fill', 'none')
  .attr('stroke', '#3b82f6')
  .attr('stroke-width', 2)
  .attr('d', line);

// Add points
g.selectAll('.dot')
  .data(chartData)
  .enter().append('circle')
  .attr('class', 'dot')
  .attr('cx', d => xScale(d[config.xField]))
  .attr('cy', d => yScale(+d[config.yField]))
  .attr('r', 4)
  .attr('fill', '#3b82f6');
` : ''}

// Add interactivity (optional)
bars?.on('mouseover', function(event, d) {
  d3.select(this).style('opacity', 0.7);
  // Add tooltip logic here
})
.on('mouseout', function() {
  d3.select(this).style('opacity', 1);
});`;
  };

  const generatePlotlyCode = (): string => {
    const plotData = generatePlotlyData();
    const layout = generatePlotlyLayout();
    
    return `// Plotly.js Chart Implementation
// Generated by DynaChart Studio

// Sample data (replace with your actual data)
const rawData = ${JSON.stringify(data?.data.slice(0, 10) || [], null, 2)};

// Chart data
const data = ${JSON.stringify(plotData, null, 2)};

// Layout configuration
const layout = ${JSON.stringify(layout, null, 2)};

// Configuration options
const config = {
  responsive: true,
  displayModeBar: true,
  modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d'],
  displaylogo: false
};

// Create the plot
Plotly.newPlot('chart-container', data, layout, config);

// Optional: Add event listeners
document.getElementById('chart-container').on('plotly_click', function(data) {
  console.log('Chart clicked:', data);
});`;
  };

  const generatePlotlyData = () => {
    if (!data || !config.xAxis || !config.yAxis) return [];
    
    const chartData = data.data.filter(d => d[config.xAxis!] && d[config.yAxis!]);
    
    switch (config.type) {
      case 'bar':
        return [{
          x: chartData.map(d => d[config.xAxis!]),
          y: chartData.map(d => +d[config.yAxis!]),
          type: 'bar',
          marker: { color: '#3b82f6' }
        }];
      case 'line':
        return [{
          x: chartData.map(d => d[config.xAxis!]),
          y: chartData.map(d => +d[config.yAxis!]),
          type: 'scatter',
          mode: 'lines+markers',
          line: { color: '#3b82f6' }
        }];
      case 'scatter':
        return [{
          x: chartData.map(d => d[config.xAxis!]),
          y: chartData.map(d => +d[config.yAxis!]),
          type: 'scatter',
          mode: 'markers',
          marker: { color: '#3b82f6', size: 8 }
        }];
      default:
        return [];
    }
  };

  const generatePlotlyLayout = () => {
    return {
      title: {
        text: config.title,
        font: { color: config.theme === 'dark' ? '#e5e7eb' : '#374151' }
      },
      paper_bgcolor: config.theme === 'dark' ? '#111827' : '#ffffff',
      plot_bgcolor: config.theme === 'dark' ? '#1f2937' : '#f9fafb',
      font: { color: config.theme === 'dark' ? '#e5e7eb' : '#374151' },
      width: config.width,
      height: config.height,
      xaxis: {
        title: config.xAxis,
        gridcolor: config.theme === 'dark' ? '#374151' : '#e5e7eb'
      },
      yaxis: {
        title: config.yAxis,
        gridcolor: config.theme === 'dark' ? '#374151' : '#e5e7eb'
      }
    };
  };

  const generateHTMLTemplate = (): string => {
    const jsCode = engine === 'd3' ? generateD3Code() : generatePlotlyCode();
    const cdnLink = engine === 'd3' 
      ? 'https://d3js.org/d3.v7.min.js'
      : 'https://cdn.plot.ly/plotly-latest.min.js';
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${config.title} - Generated by DynaChart Studio</title>
  <script src="${cdnLink}"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: ${config.theme === 'dark' ? '#111827' : '#ffffff'};
      color: ${config.theme === 'dark' ? '#e5e7eb' : '#374151'};
    }
    #chart-container {
      width: 100%;
      height: 600px;
      margin: 20px auto;
    }
    .header {
      text-align: center;
      margin-bottom: 30px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>${config.title}</h1>
    <p>Generated by DynaChart Studio using ${engine === 'd3' ? 'D3.js' : 'Plotly.js'}</p>
  </div>
  
  <div id="chart-container"></div>
  
  <script>
${jsCode}
  </script>
</body>
</html>`;
  };

  const generateReactComponent = (): string => {
    if (engine === 'd3') {
      return `import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';

interface ChartProps {
  data: any[];
  width?: number;
  height?: number;
}

const ${config.title.replace(/\s+/g, '')}Chart: React.FC<ChartProps> = ({ 
  data, 
  width = ${config.width}, 
  height = ${config.height} 
}) => {
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    if (!data || !svgRef.current) return;

    // Clear previous chart
    d3.select(svgRef.current).selectAll('*').remove();

    ${generateD3Code().split('\n').slice(10).join('\n    ')}
  }, [data, width, height]);

  return (
    <div className="chart-container">
      <svg ref={svgRef} width={width} height={height}></svg>
    </div>
  );
};

export default ${config.title.replace(/\s+/g, '')}Chart;`;
    } else {
      return `import React, { useEffect, useRef } from 'react';
import Plotly from 'plotly.js-dist';

interface ChartProps {
  data: any[];
  width?: number;
  height?: number;
}

const ${config.title.replace(/\s+/g, '')}Chart: React.FC<ChartProps> = ({ 
  data, 
  width = ${config.width}, 
  height = ${config.height} 
}) => {
  const plotRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!data || !plotRef.current) return;

    ${generatePlotlyCode().split('\n').slice(5).join('\n    ')}
  }, [data, width, height]);

  return (
    <div 
      ref={plotRef} 
      className="chart-container" 
      style={{ width: '100%', height: '100%' }}
    />
  );
};

export default ${config.title.replace(/\s+/g, '')}Chart;`;
    }
  };

  const getCurrentCode = (): string => {
    switch (activeTab) {
      case 'code':
        return engine === 'd3' ? generateD3Code() : generatePlotlyCode();
      case 'html':
        return generateHTMLTemplate();
      case 'react':
        return generateReactComponent();
      default:
        return '';
    }
  };

  const getFileName = (): string => {
    const baseName = config.title.replace(/\s+/g, '_').toLowerCase();
    switch (activeTab) {
      case 'code':
        return `${baseName}_${engine}.js`;
      case 'html':
        return `${baseName}.html`;
      case 'react':
        return `${baseName}_component.tsx`;
      default:
        return 'chart.js';
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(getCurrentCode());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const downloadCode = () => {
    const code = getCurrentCode();
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = getFileName();
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-dark-800 rounded-lg w-4/5 h-4/5 flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-dark-600">
          <div className="flex items-center space-x-2">
            <Code className="h-5 w-5 text-primary-500" />
            <h2 className="text-lg font-semibold">代码导出</h2>
            <span className="text-sm text-muted-foreground">({engine.toUpperCase()})</span>
          </div>
          <button
            onClick={onClose}
            className="text-muted-foreground hover:text-white"
          >
            ✕
          </button>
        </div>

        {/* Tabs */}
        <div className="flex space-x-1 p-4 border-b border-dark-600">
          {[
            { id: 'code', label: '纯JS代码' },
            { id: 'html', label: 'HTML模板' },
            { id: 'react', label: 'React组件' },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                activeTab === tab.id
                  ? 'bg-primary-600 text-white'
                  : 'text-muted-foreground hover:text-white hover:bg-dark-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Code Content */}
        <div className="flex-1 p-4 overflow-hidden">
          <div className="h-full bg-dark-900 rounded-lg p-4 overflow-auto">
            <pre className="text-sm text-gray-300 whitespace-pre-wrap">
              <code>{getCurrentCode()}</code>
            </pre>
          </div>
        </div>

        {/* Actions */}
        <div className="flex items-center justify-between p-4 border-t border-dark-600">
          <div className="text-sm text-muted-foreground">
            文件名: {getFileName()}
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={copyToClipboard}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors"
            >
              {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              <span>{copied ? '已复制' : '复制代码'}</span>
            </button>
            <button
              onClick={downloadCode}
              className="flex items-center space-x-2 px-4 py-2 bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors"
            >
              <Download className="h-4 w-4" />
              <span>下载文件</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeExporter;